usertype String;
usertype SessionKey;
protocol EAP-TLS(UE,NW)
{

	role UE
	{
	fresh Rue: Nonce;
	fresh Ruel: Nonce;
        fresh Kseaf : SessionKey;
        fresh Methods-UE : String;
        fresh Certificate-UE : String;
	 fresh H-HandShake-UE : String;

        var Rnw: Nonce;
        var TLS-Start :String;
        var Methods-NW: String;
        var Certificate-NW:String;
        var H-HandShake-NW:String;
        send_1(UE,NW,{k(UE,NW),Rue}pk(NW));
        recv_2(NW,UE,TLS-Start);
        send_3(UE,NW,Ruel,Methods-UE);
        recv_4(NW,UE,Rnw,{Certificate-NW}sk(NW),Methods-NW);
        send_5(UE,NW,{Kseaf}pk(NW),{Certificate-UE}sk(UE));
        recv_6(NW,UE,{H-HandShake-NW}Kseaf);
        claim_i1(UE,Secret,Kseaf);
        claim_i2(UE,Secret,k(UE,NW));
        claim_i3(UE,Secret,Niagree);
        claim_i4(UE,Secret,Nisynch);
    }

    role NW
    {
        fresh Rnw: Nonce;
        fresh TLS-Start :String;
        fresh Methods-NW: String;

	fresh Certificate-NW:String;
        fresh H-HandShake-NW:String;
        var Rue: Nonce;
	var Ruel: Nonce;
        var Kseaf : SessionKey;
        var Methods-UE : String;
        var Certificate-UE : String;
        var H-HandShake-UE : String;
        recv_1(UE,NW,{k(UE,NW),Rue}pk(NW));
        send_2(NW,UE,TLS-Start);
        recv_3(UE,NW,Ruel,Methods-UE);
        send_4(NW,UE,Rnw,{Certificate-NW}sk(NW),Methods-NW);
        recv_5(UE,NW,{Kseaf}pk(NW),{Certificate-UE}sk(UE));
        send_6(NW,UE,{H-HandShake-NW}Kseaf);
        claim_i1(NW,Secret,Kseaf);
        claim_i2(NW,Secret,k(UE,NW));
        claim_i3(NW,Secret,Niagree);
        claim_i4(NW,Secret,Nisynch);
    }
}